name: Build cht-core and test against node versions

on: [push, pull_request]

env:
  COUCH_URL: http://admin:pass@localhost:5984/medic-test
  BUILDS_SERVER: ${{ secrets.AUTH_MARKET_URL && '_couch/builds_testing' || '_couch/builds_external' }}
  STAGING_SERVER: ${{ secrets.AUTH_MARKET_URL && '_couch/builds' || '_couch/builds_external' }}
  MARKET_URL_READ: 'https://staging.dev.medicmobile.org'
  MARKET_URL: ${{ secrets.AUTH_MARKET_URL || 'https://staging.dev.medicmobile.org' }}

jobs:

  build:
    name: Compile the app
    runs-on: ubuntu-18.04

    steps:
    - name: Get Docker Hub username
      id: get-docker-hub-username
      run: echo '::set-output name=dockerhub_username::${{ secrets.DOCKERHUB_USERNAME }}'
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      if: steps.get-docker-hub-username.outputs.dockerhub_username
    - name: Get branch name
      uses: nelonoel/branch-name@1ea5c86cb559a8c4e623da7f188496208232e49f
    - name: Set CI Vars
      run: |
        echo "BUILD_NUMBER=$GITHUB_RUN_ID" >> $GITHUB_ENV
        echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
    - uses: actions/checkout@v2
    - name: Use Node.js 16.x
      uses: actions/setup-node@v1
      with:
        node-version: 16.x
    - name: Couch Start
      run: ./scripts/ci/couch-start
    - name: Create logs directory
      run: mkdir tests/logs
    - name: npm CI
      run: npm ci
    - name: Grunt Install
      run: npm install -g grunt-cli
    - name: Grunt CI-Compile
      run: |
        node --stack_size=10000 `which grunt` ci-compile-github
    - name: Publish for testing
      run: |
        node --stack_size=10000 `which grunt` publish-for-testing

  config-tests:
    needs: build
    name: Config Tests
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        grunt-cmd: [ 'exec:test-config-standard', 'exec:test-config-default']

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 16.x
      uses: actions/setup-node@v1
      with:
        node-version: 16.x
    - name: Grunt Install
      run: npm install -g grunt-cli
    - name: NPM
      run: npm ci
    - name: Run Tests
      run: node --stack_size=10000 `which grunt` ${{ matrix.grunt-cmd }}

  publish:
    needs: [tests,config-tests]
    name: Publish branch build
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: Get branch name
      uses: nelonoel/branch-name@1ea5c86cb559a8c4e623da7f188496208232e49f
    - name: Set CI Vars
      run: |
        echo "BUILD_NUMBER=$GITHUB_RUN_ID" >> $GITHUB_ENV
        echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
    - name: Publish
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        cd scripts/ci
        npm ci
        node ./publish.js

  tests:
    needs: build
    name: ${{ matrix.grunt-cmd }} on node ${{ matrix.node-version }}
    runs-on: ubuntu-18.04
    env:
      NODE: ${{ matrix.node-version }}

    strategy:
      matrix:
        node-version: ['16.x']
        grunt-cmd: ['ci-webdriver-default', 'ci-webdriver-standard', 'ci-e2e-integration', 'ci-e2e', 'ci-e2e-mobile', 'ci-e2e-cht']

    steps:
    - name: Get Docker Hub username
      id: get-docker-hub-username
      run: echo '::set-output name=dockerhub_username::${{ secrets.DOCKERHUB_USERNAME }}'
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      if: steps.get-docker-hub-username.outputs.dockerhub_username
    - name: Get branch name
      uses: nelonoel/branch-name@1ea5c86cb559a8c4e623da7f188496208232e49f
    - name: Use Node.js 16.x
      uses: actions/setup-node@v1
      with:
        node-version: 16.x
    - uses: actions/checkout@v2
    - name: Set CI Vars
      run: |
        echo "BUILD_NUMBER=$GITHUB_RUN_ID" >> $GITHUB_ENV
        echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
        echo "VERSION=$(npm pkg get version | sed 's/"//g')" >> $GITHUB_ENV
        echo "IMAGE_TAG=$VERSION-$BRANCH.$BUILD_NUMBER"
        echo "TEST_SUITE=integration" >> $GITHUB_ENV
        echo "HORTI_BUILDS_SERVER=$MARKET_URL_READ/$BUILDS_SERVER" >> $GITHUB_ENV
    - name: Create logs directory
      run: mkdir tests/logs
    - name: Install pyxform
      run:  python -m pip install git+https://github.com/medic/pyxform.git@medic-conf-1.17#egg=pyxform-medic
    - name: Install cht-conf
      run:  npm install -g cht-conf
    - name: npm CI
      run: npm ci
    - name: CHT Setup
      run: |
        docker-compose -f scripts/ci/cht-compose.yml up -d
        sh scripts/e2e/wait_for_response_code.sh 5988 200 api
    - name: Test it!
      run: node --stack_size=10000 `which grunt` ${{ matrix.grunt-cmd }}
    - name: Dump logs
      run: |
        docker logs couch > tests/logs/couch_container.log 2>&1 &&
        docker logs cht-api > tests/logs/cht-api.log 2>&1
        docker logs cht-sentinel > tests/logs/cht-sentinel.log 2>&1
      if: ${{ always() }}
    - name: Archive Results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.grunt-cmd }} on node ${{ matrix.node-version }}
        path: |
          allure-results
          allure-report
          tests/logs
          tests/results/
      if: ${{ failure() }}
